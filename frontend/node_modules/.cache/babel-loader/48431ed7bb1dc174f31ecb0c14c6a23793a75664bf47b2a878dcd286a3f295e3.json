{"ast":null,"code":"var _jsxFileName = \"/home/aria/source/pomodoro/src/components/TimerText.js\",\n  _s = $RefreshSig$();\nimport { useState } from \"react\";\nimport \"./../App.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction TimerText() {\n  _s();\n  // total time in seconds\n  // initial time is 25 minutes\n  const [time, setTime] = useState(1500);\n  const [seconds, setSeconds] = useState(0);\n  const [minutes, setMinutes] = useState(25);\n  function UpdateTime() {\n    // subtract a second from time\n    setTime(time - 1);\n\n    // now calculate the time in minutes and remaining seconds\n    var minutes = Math.floor(time / 60);\n    var seconds = time % 60;\n  }\n\n  // start timer\n  // updates every 1 second\n  setInterval(UpdateTime(), 1000);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: minutes + \":\" + String(seconds).padStart(2, \"0\")\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 27,\n    columnNumber: 9\n  }, this);\n}\n_s(TimerText, \"DJchKazmHx7C/3mejZRn4WnZ/gc=\");\n_c = TimerText;\nexport default TimerText;\nvar _c;\n$RefreshReg$(_c, \"TimerText\");","map":{"version":3,"names":["useState","jsxDEV","_jsxDEV","TimerText","_s","time","setTime","seconds","setSeconds","minutes","setMinutes","UpdateTime","Math","floor","setInterval","children","String","padStart","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/aria/source/pomodoro/src/components/TimerText.js"],"sourcesContent":["import { useState } from \"react\";\nimport \"./../App.css\";\n\nfunction TimerText() {\n    // total time in seconds\n    // initial time is 25 minutes\n    const[time, setTime] = useState(1500);\n\n    const [seconds, setSeconds] = useState(0);\n    const [minutes, setMinutes] = useState(25);\n\n    function UpdateTime() {\n        // subtract a second from time\n        setTime(time - 1);\n\n        // now calculate the time in minutes and remaining seconds\n        var minutes = Math.floor(time / 60);\n        var seconds = time % 60;\n    }\n\n    // start timer\n    // updates every 1 second\n    setInterval(UpdateTime(), 1000);\n\n\n    return(\n        <div>\n            <h1>{minutes + \":\" + String(seconds).padStart(2, \"0\")}</h1>\n        </div>\n    )\n}\n\nexport default TimerText;"],"mappings":";;AAAA,SAASA,QAAQ,QAAQ,OAAO;AAChC,OAAO,cAAc;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEtB,SAASC,SAASA,CAAA,EAAG;EAAAC,EAAA;EACjB;EACA;EACA,MAAK,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGN,QAAQ,CAAC,IAAI,CAAC;EAErC,MAAM,CAACO,OAAO,EAAEC,UAAU,CAAC,GAAGR,QAAQ,CAAC,CAAC,CAAC;EACzC,MAAM,CAACS,OAAO,EAAEC,UAAU,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC;EAE1C,SAASW,UAAUA,CAAA,EAAG;IAClB;IACAL,OAAO,CAACD,IAAI,GAAG,CAAC,CAAC;;IAEjB;IACA,IAAII,OAAO,GAAGG,IAAI,CAACC,KAAK,CAACR,IAAI,GAAG,EAAE,CAAC;IACnC,IAAIE,OAAO,GAAGF,IAAI,GAAG,EAAE;EAC3B;;EAEA;EACA;EACAS,WAAW,CAACH,UAAU,CAAC,CAAC,EAAE,IAAI,CAAC;EAG/B,oBACIT,OAAA;IAAAa,QAAA,eACIb,OAAA;MAAAa,QAAA,EAAKN,OAAO,GAAG,GAAG,GAAGO,MAAM,CAACT,OAAO,CAAC,CAACU,QAAQ,CAAC,CAAC,EAAE,GAAG;IAAC;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC1D,CAAC;AAEd;AAACjB,EAAA,CA3BQD,SAAS;AAAAmB,EAAA,GAATnB,SAAS;AA6BlB,eAAeA,SAAS;AAAC,IAAAmB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
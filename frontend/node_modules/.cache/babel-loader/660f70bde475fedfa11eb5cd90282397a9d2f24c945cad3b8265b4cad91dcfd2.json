{"ast":null,"code":"var _jsxFileName = \"/home/aria/source/pomodoro/src/components/Timer.js\",\n  _s = $RefreshSig$();\nimport { useState, useEffect } from \"react\";\nimport TimerText from \"./TimerText\";\nimport TimerButton from \"./TimerButton\";\nimport \"./../App.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Timer() {\n  _s();\n  // total time in seconds\n  // initial time is 25 minutes\n  const [time, setTime] = useState(1500);\n  const [seconds, setSeconds] = useState(0);\n  const [minutes, setMinutes] = useState(25);\n\n  // state to store if timer should countdown\n  const [isRunning, setIsRunning] = useState(true);\n  let interval = null;\n  function UpdateTime() {\n    // subtract a second from time\n    setTime(time => time - 1);\n\n    // now calculate the time in minutes and remaining seconds\n    setMinutes(Math.floor(time / 60));\n    setSeconds(time % 60);\n  }\n  function ToggleIsRunning() {\n    if (isRunning) {\n      if (interval != null) {\n        // stop timer\n        clearInterval(interval);\n        setIsRunning(false);\n      }\n    } else {\n      StartTimer();\n    }\n  }\n  function StartTimer() {\n    interval = setInterval(() => {\n      UpdateTime();\n    }, 1000);\n  }\n\n  // start timer\n  // updates every 1 second\n  useEffect(() => {\n    StartTimer();\n\n    // clear interval\n    return () => clearInterval(interval);\n  }, [time, seconds, minutes]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(TimerText, {\n      minutes: minutes,\n      seconds: seconds\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(TimerButton, {\n      onClick: ToggleIsRunning\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 57,\n    columnNumber: 9\n  }, this);\n}\n_s(Timer, \"3jr0rIMfooNoJikKh2ADuIao01Y=\");\n_c = Timer;\nexport default Timer;\nvar _c;\n$RefreshReg$(_c, \"Timer\");","map":{"version":3,"names":["useState","useEffect","TimerText","TimerButton","jsxDEV","_jsxDEV","Timer","_s","time","setTime","seconds","setSeconds","minutes","setMinutes","isRunning","setIsRunning","interval","UpdateTime","Math","floor","ToggleIsRunning","clearInterval","StartTimer","setInterval","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["/home/aria/source/pomodoro/src/components/Timer.js"],"sourcesContent":["import { useState, useEffect } from \"react\";\nimport TimerText from \"./TimerText\";\nimport TimerButton from \"./TimerButton\";\nimport \"./../App.css\";\n\nfunction Timer() {\n    // total time in seconds\n    // initial time is 25 minutes\n    const[time, setTime] = useState(1500);\n\n    const [seconds, setSeconds] = useState(0);\n    const [minutes, setMinutes] = useState(25);\n\n    // state to store if timer should countdown\n    const [isRunning, setIsRunning] = useState(true);\n\n    let interval = null;\n\n    function UpdateTime() {\n        // subtract a second from time\n        setTime(time => time - 1);\n\n        // now calculate the time in minutes and remaining seconds\n        setMinutes(Math.floor(time / 60))\n        setSeconds(time % 60);\n    }\n\n    function ToggleIsRunning() {\n        if(isRunning) {\n            if(interval != null) {\n                // stop timer\n                clearInterval(interval);\n                setIsRunning(false);\n            }\n        }\n        else {\n            StartTimer();\n        }\n    }\n\n    function StartTimer() {\n        interval = setInterval(() => {\n            UpdateTime();\n        }, 1000);\n    }\n\n    // start timer\n    // updates every 1 second\n    useEffect(() => {\n        StartTimer();\n        \n        // clear interval\n        return () => clearInterval(interval);\n    }, [time, seconds, minutes]);\n\n    return (\n        <div>\n            <TimerText minutes={minutes} seconds={seconds}/>\n            <TimerButton onClick={ToggleIsRunning}/>\n        </div>\n    );\n}\n\nexport default Timer;"],"mappings":";;AAAA,SAASA,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAC3C,OAAOC,SAAS,MAAM,aAAa;AACnC,OAAOC,WAAW,MAAM,eAAe;AACvC,OAAO,cAAc;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEtB,SAASC,KAAKA,CAAA,EAAG;EAAAC,EAAA;EACb;EACA;EACA,MAAK,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGT,QAAQ,CAAC,IAAI,CAAC;EAErC,MAAM,CAACU,OAAO,EAAEC,UAAU,CAAC,GAAGX,QAAQ,CAAC,CAAC,CAAC;EACzC,MAAM,CAACY,OAAO,EAAEC,UAAU,CAAC,GAAGb,QAAQ,CAAC,EAAE,CAAC;;EAE1C;EACA,MAAM,CAACc,SAAS,EAAEC,YAAY,CAAC,GAAGf,QAAQ,CAAC,IAAI,CAAC;EAEhD,IAAIgB,QAAQ,GAAG,IAAI;EAEnB,SAASC,UAAUA,CAAA,EAAG;IAClB;IACAR,OAAO,CAACD,IAAI,IAAIA,IAAI,GAAG,CAAC,CAAC;;IAEzB;IACAK,UAAU,CAACK,IAAI,CAACC,KAAK,CAACX,IAAI,GAAG,EAAE,CAAC,CAAC;IACjCG,UAAU,CAACH,IAAI,GAAG,EAAE,CAAC;EACzB;EAEA,SAASY,eAAeA,CAAA,EAAG;IACvB,IAAGN,SAAS,EAAE;MACV,IAAGE,QAAQ,IAAI,IAAI,EAAE;QACjB;QACAK,aAAa,CAACL,QAAQ,CAAC;QACvBD,YAAY,CAAC,KAAK,CAAC;MACvB;IACJ,CAAC,MACI;MACDO,UAAU,CAAC,CAAC;IAChB;EACJ;EAEA,SAASA,UAAUA,CAAA,EAAG;IAClBN,QAAQ,GAAGO,WAAW,CAAC,MAAM;MACzBN,UAAU,CAAC,CAAC;IAChB,CAAC,EAAE,IAAI,CAAC;EACZ;;EAEA;EACA;EACAhB,SAAS,CAAC,MAAM;IACZqB,UAAU,CAAC,CAAC;;IAEZ;IACA,OAAO,MAAMD,aAAa,CAACL,QAAQ,CAAC;EACxC,CAAC,EAAE,CAACR,IAAI,EAAEE,OAAO,EAAEE,OAAO,CAAC,CAAC;EAE5B,oBACIP,OAAA;IAAAmB,QAAA,gBACInB,OAAA,CAACH,SAAS;MAACU,OAAO,EAAEA,OAAQ;MAACF,OAAO,EAAEA;IAAQ;MAAAe,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAC,CAAC,eAChDvB,OAAA,CAACF,WAAW;MAAC0B,OAAO,EAAET;IAAgB;MAAAK,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAC,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACvC,CAAC;AAEd;AAACrB,EAAA,CAxDQD,KAAK;AAAAwB,EAAA,GAALxB,KAAK;AA0Dd,eAAeA,KAAK;AAAC,IAAAwB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
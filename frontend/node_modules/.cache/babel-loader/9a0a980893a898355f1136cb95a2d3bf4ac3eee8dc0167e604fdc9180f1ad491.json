{"ast":null,"code":"var _jsxFileName = \"/home/aria/source/pomodoro/src/components/Timer.js\",\n  _s = $RefreshSig$();\nimport { useState, useEffect, useRef } from \"react\";\nimport TimerText from \"./TimerText\";\nimport TimerButton from \"./TimerButton\";\nimport ModeSelection from \"./ModeSelection\";\nimport \"./../App.css\";\nimport { MODES } from \"./../utils/Constants\";\n\n/*\n    Component for the timer\n*/\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Timer() {\n  _s();\n  const [timeLeft, setTimeLeft] = useState(1500);\n  const [timerOn, setTimerOn] = useState(false);\n  const [minutes, setMinutes] = useState(25);\n  const [seconds, setSeconds] = useState(0);\n  const [currMode, setCurrMode] = useState(MODES.POMODORO);\n\n  /*\n      Calculates the minutes and seconds of time left\n  */\n  function CalculateTime() {\n    setMinutes(Math.floor(timeLeft / 60));\n    setSeconds(timeLeft % 60);\n\n    // stops timer after complete\n    if (timeLeft <= 0) {\n      setTimerOn(false);\n    }\n  }\n\n  /*\n      Changes the time to the time of a corresponding mode\n  */\n  function SwitchMode(mode) {\n    if (currMode === mode) return;\n    setCurrMode(mode);\n\n    // stop timer\n    setTimerOn(false);\n\n    // change the time of the timer to the time of the corresponding mode\n    if (currMode === MODES.POMODORO) {\n      setTimeLeft(prev => 1500);\n    } else if (currMode == MODES.SHORT_BREAK) {\n      setTimeLeft(prev => 300);\n    } else {\n      setTimeLeft(prev => 1800);\n    }\n    CalculateTime();\n  }\n  useEffect(() => {\n    let timer = null;\n\n    // create interval when timer is running\n    if (timerOn) {\n      timer = setInterval(() => {\n        setTimeLeft(prev => prev - 1);\n        CalculateTime();\n      }, 1000);\n    } else {\n      clearInterval(timer);\n    }\n    return () => clearInterval(timer);\n  }, [timeLeft, timerOn, currMode]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(ModeSelection, {\n      SwitchMode: SwitchMode\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(TimerText, {\n      minutes: minutes,\n      seconds: seconds\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(TimerButton, {\n      text: timerOn ? \"Pause\" : \"Start\",\n      onClick: () => {\n        setTimerOn(!timerOn);\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 74,\n    columnNumber: 9\n  }, this);\n}\n_s(Timer, \"eruwzlpMbFHd+QLiiuQ2KMx0HKs=\");\n_c = Timer;\nexport default Timer;\nvar _c;\n$RefreshReg$(_c, \"Timer\");","map":{"version":3,"names":["useState","useEffect","useRef","TimerText","TimerButton","ModeSelection","MODES","jsxDEV","_jsxDEV","Timer","_s","timeLeft","setTimeLeft","timerOn","setTimerOn","minutes","setMinutes","seconds","setSeconds","currMode","setCurrMode","POMODORO","CalculateTime","Math","floor","SwitchMode","mode","prev","SHORT_BREAK","timer","setInterval","clearInterval","children","fileName","_jsxFileName","lineNumber","columnNumber","text","onClick","_c","$RefreshReg$"],"sources":["/home/aria/source/pomodoro/src/components/Timer.js"],"sourcesContent":["import { useState, useEffect, useRef } from \"react\";\nimport TimerText from \"./TimerText\";\nimport TimerButton from \"./TimerButton\";\nimport ModeSelection from \"./ModeSelection\";\nimport \"./../App.css\";\nimport { MODES } from \"./../utils/Constants\";\n\n/*\n    Component for the timer\n*/\nfunction Timer() {\n    const [timeLeft, setTimeLeft] = useState(1500);\n    const [timerOn, setTimerOn] = useState(false);\n    const [minutes, setMinutes] = useState(25);\n    const [seconds, setSeconds] = useState(0);\n    const [currMode, setCurrMode] = useState(MODES.POMODORO);\n\n    /*\n        Calculates the minutes and seconds of time left\n    */\n    function CalculateTime() {\n        setMinutes(Math.floor(timeLeft/60));\n        setSeconds(timeLeft % 60);\n\n        // stops timer after complete\n        if(timeLeft <= 0) {\n            setTimerOn(false);\n        }\n    }\n\n    /*\n        Changes the time to the time of a corresponding mode\n    */\n    function SwitchMode(mode) {\n        if(currMode === mode) return; \n\n        setCurrMode(mode);\n\n        // stop timer\n        setTimerOn(false);\n\n        // change the time of the timer to the time of the corresponding mode\n        if(currMode === MODES.POMODORO) {\n            setTimeLeft((prev) => 1500);\n        }\n        else if(currMode == MODES.SHORT_BREAK) {\n            setTimeLeft((prev) => 300);\n        }\n        else {\n            setTimeLeft((prev) => 1800);\n        }\n\n        CalculateTime();\n    }\n\n    useEffect(() => {\n        let timer = null;\n\n        // create interval when timer is running\n        if(timerOn) {\n            timer = setInterval(() => {\n                setTimeLeft((prev) => prev - 1);\n                CalculateTime();\n            }, 1000);\n        }\n        else {\n            clearInterval(timer);\n        }\n\n        return () => clearInterval(timer);\n    }, [timeLeft, timerOn, currMode]);\n\n    return (\n        <div>\n            <ModeSelection SwitchMode={SwitchMode}/>\n            <TimerText minutes={minutes} seconds={seconds}/>\n            <TimerButton text={timerOn ? \"Pause\" : \"Start\"} onClick={() => {setTimerOn(!timerOn)}}/>\n        </div>\n    );\n}\n\nexport default Timer;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
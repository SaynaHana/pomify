{"ast":null,"code":"var _jsxFileName = \"/home/aria/source/pomodoro/src/components/Timer.js\",\n  _s = $RefreshSig$();\nimport { useState, useEffect, useRef } from \"react\";\nimport TimerText from \"./TimerText\";\nimport TimerButton from \"./TimerButton\";\nimport ModeSelection from \"./ModeSelection\";\nimport \"./../App.css\";\nimport { MODES } from \"./../utils/Constants\";\n\n/*\n    Component for the timer\n*/\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Timer() {\n  _s();\n  const [timeLeft, setTimeLeft] = useState(1500);\n  const [timerOn, setTimerOn] = useState(false);\n  const [minutes, setMinutes] = useState(25);\n  const [seconds, setSeconds] = useState(0);\n  const [currMode, setCurrMode] = useState(MODES.POMODORO);\n  const [pomodoroCount, setPomodoroCount] = useState(0);\n\n  /*\n      Calculates the minutes and seconds of time left\n  */\n  function CalculateTime(time) {\n    setMinutes(Math.floor(time / 60));\n    setSeconds(time % 60);\n\n    // stops timer after complete\n    if (time <= 0) {\n      setTimerOn(false);\n    }\n  }\n\n  /*\n      Changes the time to the time of a corresponding mode\n  */\n  function SwitchMode(mode) {\n    if (currMode === mode) return;\n    setCurrMode(mode);\n\n    // stop timer\n    setTimerOn(false);\n    let time = 0;\n\n    // change the time of the timer to the time of the corresponding mode\n    if (mode === MODES.POMODORO) {\n      time = 1500;\n    } else if (mode === MODES.SHORT_BREAK) {\n      time = 300;\n    } else {\n      time = 1800;\n    }\n    setTimeLeft(time);\n    CalculateTime(time);\n  }\n\n  /*\n      Notifies the user that time is up and switches the mode\n  */\n  function onTimerEnd() {\n    // stop timer\n    setTimerOn(false);\n    let nextMode = MODES.POMODORO;\n\n    // if pomodoro just finished, increment pomodoroCount\n    if (currMode === MODES.POMODORO) {\n      // if pomodoroCount + 1 is a multiple of 4, then take long break\n      // otherwise, short break\n      if ((pomodoroCount + 1) % 4 === 0) {\n        nextMode == MODES.LONG_BREAK;\n      } else {\n        nextMode = MODES.SHORT_BREAK;\n      }\n      setPomodoroCount(prev => prev + 1);\n    }\n    SwitchMode(nextMode);\n  }\n  useEffect(() => {\n    let timer = null;\n\n    // create interval when timer is running\n    if (timerOn) {\n      timer = setInterval(() => {\n        CalculateTime(timeLeft - 1);\n        setTimeLeft(prev => prev - 1);\n      }, 1000);\n    } else {\n      clearInterval(timer);\n    }\n    return () => clearInterval(timer);\n  }, [timeLeft, timerOn, currMode]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(ModeSelection, {\n      SwitchMode: SwitchMode\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(TimerText, {\n      minutes: minutes,\n      seconds: seconds\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(TimerButton, {\n      text: timerOn ? \"Pause\" : \"Start\",\n      onClick: () => {\n        setTimerOn(!timerOn);\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 104,\n    columnNumber: 9\n  }, this);\n}\n_s(Timer, \"zJJSNoMv53BXvIkHkewzKg71S+A=\");\n_c = Timer;\nexport default Timer;\nvar _c;\n$RefreshReg$(_c, \"Timer\");","map":{"version":3,"names":["useState","useEffect","useRef","TimerText","TimerButton","ModeSelection","MODES","jsxDEV","_jsxDEV","Timer","_s","timeLeft","setTimeLeft","timerOn","setTimerOn","minutes","setMinutes","seconds","setSeconds","currMode","setCurrMode","POMODORO","pomodoroCount","setPomodoroCount","CalculateTime","time","Math","floor","SwitchMode","mode","SHORT_BREAK","onTimerEnd","nextMode","LONG_BREAK","prev","timer","setInterval","clearInterval","children","fileName","_jsxFileName","lineNumber","columnNumber","text","onClick","_c","$RefreshReg$"],"sources":["/home/aria/source/pomodoro/src/components/Timer.js"],"sourcesContent":["import { useState, useEffect, useRef } from \"react\";\nimport TimerText from \"./TimerText\";\nimport TimerButton from \"./TimerButton\";\nimport ModeSelection from \"./ModeSelection\";\nimport \"./../App.css\";\nimport { MODES } from \"./../utils/Constants\";\n\n/*\n    Component for the timer\n*/\nfunction Timer() {\n    const [timeLeft, setTimeLeft] = useState(1500);\n    const [timerOn, setTimerOn] = useState(false);\n    const [minutes, setMinutes] = useState(25);\n    const [seconds, setSeconds] = useState(0);\n    const [currMode, setCurrMode] = useState(MODES.POMODORO);\n    const [pomodoroCount, setPomodoroCount] = useState(0);\n\n    /*\n        Calculates the minutes and seconds of time left\n    */\n    function CalculateTime(time) {\n        setMinutes(Math.floor(time/60));\n        setSeconds(time % 60);\n\n        // stops timer after complete\n        if(time <= 0) {\n            setTimerOn(false);\n        }\n    }\n\n    /*\n        Changes the time to the time of a corresponding mode\n    */\n    function SwitchMode(mode) {\n        if(currMode === mode) return; \n\n        setCurrMode(mode);\n\n        // stop timer\n        setTimerOn(false);\n\n        let time = 0;\n\n        // change the time of the timer to the time of the corresponding mode\n        if(mode === MODES.POMODORO) {\n            time = 1500;\n        }\n        else if(mode === MODES.SHORT_BREAK) {\n            time = 300;\n        }\n        else {\n            time = 1800;\n        }\n\n        setTimeLeft(time);\n        CalculateTime(time);\n    }\n\n    /*\n        Notifies the user that time is up and switches the mode\n    */\n    function onTimerEnd() {\n        // stop timer\n        setTimerOn(false);\n\n        let nextMode = MODES.POMODORO;\n\n        // if pomodoro just finished, increment pomodoroCount\n        if(currMode === MODES.POMODORO) {\n            // if pomodoroCount + 1 is a multiple of 4, then take long break\n            // otherwise, short break\n            if((pomodoroCount + 1) % 4 === 0) {\n                nextMode == MODES.LONG_BREAK;\n            }\n            else {\n                nextMode = MODES.SHORT_BREAK;\n            }\n\n            setPomodoroCount((prev) => prev + 1);\n        }\n\n        SwitchMode(nextMode);\n    }\n\n    useEffect(() => {\n        let timer = null;\n\n        // create interval when timer is running\n        if(timerOn) {\n            timer = setInterval(() => {\n                CalculateTime(timeLeft - 1);\n                setTimeLeft((prev) => prev - 1);\n            }, 1000);\n        }\n        else {\n            clearInterval(timer);\n        }\n\n        return () => clearInterval(timer);\n    }, [timeLeft, timerOn, currMode]);\n\n    return (\n        <div>\n            <ModeSelection SwitchMode={SwitchMode}/>\n            <TimerText minutes={minutes} seconds={seconds}/>\n            <TimerButton text={timerOn ? \"Pause\" : \"Start\"} onClick={() => {setTimerOn(!timerOn)}}/>\n        </div>\n    );\n}\n\nexport default Timer;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
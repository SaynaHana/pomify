{"ast":null,"code":"var _jsxFileName = \"/home/aria/source/pomodoro/src/components/TimerText.js\",\n  _s = $RefreshSig$();\nimport { useState, useEffect } from \"react\";\nimport \"./../App.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction TimerText() {\n  _s();\n  // total time in seconds\n  // initial time is 25 minutes\n  const [time, setTime] = useState(1500);\n  const [seconds, setSeconds] = useState(0);\n  const [minutes, setMinutes] = useState(25);\n  function UpdateTime() {\n    // subtract a second from time\n    setTime(time);\n\n    // now calculate the time in minutes and remaining seconds\n    setMinutes(Math.floor(time / 60) % 60);\n    setSeconds(Math.floor(time % 60) % 60);\n  }\n\n  // start timer\n  // updates every 1 second\n  useEffect(() => {\n    // set interval\n    const interval = setInterval(UpdateTime(), 1000);\n\n    // clear interval\n    return () => clearInterval(interval);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: minutes + \":\" + String(seconds).padStart(2, \"0\")\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 33,\n    columnNumber: 9\n  }, this);\n}\n_s(TimerText, \"5yvAsN3xHjIUu5yYXhWTb/7XAbo=\");\n_c = TimerText;\nexport default TimerText;\nvar _c;\n$RefreshReg$(_c, \"TimerText\");","map":{"version":3,"names":["useState","useEffect","jsxDEV","_jsxDEV","TimerText","_s","time","setTime","seconds","setSeconds","minutes","setMinutes","UpdateTime","Math","floor","interval","setInterval","clearInterval","children","String","padStart","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/aria/source/pomodoro/src/components/TimerText.js"],"sourcesContent":["import { useState, useEffect } from \"react\";\nimport \"./../App.css\";\n\nfunction TimerText() {\n    // total time in seconds\n    // initial time is 25 minutes\n    const[time, setTime] = useState(1500);\n\n    const [seconds, setSeconds] = useState(0);\n    const [minutes, setMinutes] = useState(25);\n\n    function UpdateTime() {\n        // subtract a second from time\n        setTime(time);\n\n        // now calculate the time in minutes and remaining seconds\n        setMinutes(Math.floor(time / 60) % 60);\n        setSeconds(Math.floor(time % 60) % 60);\n    }\n\n    // start timer\n    // updates every 1 second\n    useEffect(() => {\n        // set interval\n        const interval = setInterval(UpdateTime(), 1000);\n        \n        // clear interval\n        return () => clearInterval(interval);\n    }, []);\n\n\n    return(\n        <div>\n            <h1>{minutes + \":\" + String(seconds).padStart(2, \"0\")}</h1>\n        </div>\n    )\n}\n\nexport default TimerText;"],"mappings":";;AAAA,SAASA,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAC3C,OAAO,cAAc;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEtB,SAASC,SAASA,CAAA,EAAG;EAAAC,EAAA;EACjB;EACA;EACA,MAAK,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGP,QAAQ,CAAC,IAAI,CAAC;EAErC,MAAM,CAACQ,OAAO,EAAEC,UAAU,CAAC,GAAGT,QAAQ,CAAC,CAAC,CAAC;EACzC,MAAM,CAACU,OAAO,EAAEC,UAAU,CAAC,GAAGX,QAAQ,CAAC,EAAE,CAAC;EAE1C,SAASY,UAAUA,CAAA,EAAG;IAClB;IACAL,OAAO,CAACD,IAAI,CAAC;;IAEb;IACAK,UAAU,CAACE,IAAI,CAACC,KAAK,CAACR,IAAI,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC;IACtCG,UAAU,CAACI,IAAI,CAACC,KAAK,CAACR,IAAI,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC;EAC1C;;EAEA;EACA;EACAL,SAAS,CAAC,MAAM;IACZ;IACA,MAAMc,QAAQ,GAAGC,WAAW,CAACJ,UAAU,CAAC,CAAC,EAAE,IAAI,CAAC;;IAEhD;IACA,OAAO,MAAMK,aAAa,CAACF,QAAQ,CAAC;EACxC,CAAC,EAAE,EAAE,CAAC;EAGN,oBACIZ,OAAA;IAAAe,QAAA,eACIf,OAAA;MAAAe,QAAA,EAAKR,OAAO,GAAG,GAAG,GAAGS,MAAM,CAACX,OAAO,CAAC,CAACY,QAAQ,CAAC,CAAC,EAAE,GAAG;IAAC;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC1D,CAAC;AAEd;AAACnB,EAAA,CAjCQD,SAAS;AAAAqB,EAAA,GAATrB,SAAS;AAmClB,eAAeA,SAAS;AAAC,IAAAqB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
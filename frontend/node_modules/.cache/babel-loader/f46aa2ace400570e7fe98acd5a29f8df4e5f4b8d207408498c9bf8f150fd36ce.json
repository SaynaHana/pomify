{"ast":null,"code":"var _jsxFileName = \"/home/aria/source/pomodoro/src/components/Timer.js\",\n  _s = $RefreshSig$();\nimport { useState, useEffect, useRef } from \"react\";\nimport TimerText from \"./TimerText\";\nimport TimerButton from \"./TimerButton\";\nimport ModeSelection from \"./ModeSelection\";\nimport \"./../App.css\";\nimport { MODES } from \"./../utils/Constants\";\nimport useSound from \"use-sound\";\nimport endSound from \"../assets/audio/bell.mp3\";\n\n/*\n    Component for the timer\n*/\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Timer() {\n  _s();\n  const [timeLeft, setTimeLeft] = useState(localStorage.getItem(\"timeLeft\"));\n  const [timerOn, setTimerOn] = useState(false);\n  const [minutes, setMinutes] = useState(25);\n  const [seconds, setSeconds] = useState(0);\n  const [currMode, setCurrMode] = useState(MODES.POMODORO);\n  const [pomodoroCount, setPomodoroCount] = useState(0);\n  const [playSound] = useSound(endSound, {\n    volume: 0.1\n  });\n\n  /*\n      Calculates the minutes and seconds of time left\n  */\n  function CalculateTime(time) {\n    setMinutes(Math.floor(time / 60));\n    setSeconds(time % 60);\n\n    // stops timer after complete\n    if (time <= 0) {\n      onTimerEnd();\n    }\n\n    // cache time\n    localStorage.setItem(\"timeLeft\", time);\n  }\n\n  /*\n      Changes the time to the time of a corresponding mode\n  */\n  function SwitchMode(mode) {\n    if (currMode === mode) return;\n    setCurrMode(mode);\n\n    // stop timer\n    setTimerOn(false);\n    let time = 0;\n\n    // change the time of the timer to the time of the corresponding mode\n    if (mode === MODES.POMODORO) {\n      time = 1500;\n    } else if (mode === MODES.SHORT_BREAK) {\n      time = 300;\n    } else {\n      time = 1800;\n    }\n    setTimeLeft(time);\n    CalculateTime(time);\n\n    // cache mode \n    localStorage.setItem(\"mode\", mode);\n  }\n\n  /*\n      Notifies the user that time is up and switches the mode\n  */\n  function onTimerEnd() {\n    // stop timer\n    setTimerOn(false);\n    playSound();\n    let nextMode = MODES.POMODORO;\n\n    // if pomodoro just finished, increment pomodoroCount\n    if (currMode === MODES.POMODORO) {\n      // if pomodoroCount + 1 is a multiple of 4, then take long break\n      // otherwise, short break\n      if ((pomodoroCount + 1) % 4 === 0) {\n        nextMode = MODES.LONG_BREAK;\n      } else {\n        nextMode = MODES.SHORT_BREAK;\n      }\n      setPomodoroCount(prev => prev + 1);\n\n      // cache pomodoro count\n      localStorage.setItem(\"pomodoroCount\", pomodoroCount);\n    }\n    SwitchMode(nextMode);\n  }\n  useEffect(() => {\n    let timer = null;\n    CalculateTime(timeLeft);\n\n    // create interval when timer is running\n    if (timerOn) {\n      timer = setInterval(() => {\n        CalculateTime(timeLeft - 1);\n        setTimeLeft(prev => prev - 1);\n      }, 1000);\n    } else {\n      clearInterval(timer);\n    }\n    return () => clearInterval(timer);\n  }, [timeLeft, timerOn, currMode]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(ModeSelection, {\n      SwitchMode: SwitchMode\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(TimerText, {\n      minutes: minutes,\n      seconds: seconds\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(TimerButton, {\n      text: timerOn ? \"Pause\" : \"Start\",\n      onClick: () => {\n        setTimerOn(!timerOn);\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n      id: \"pomodoro-count\",\n      children: [\"#\", pomodoroCount + 1]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 119,\n    columnNumber: 9\n  }, this);\n}\n_s(Timer, \"RU/M2lCpJkkW63oRxvlaafBEYCg=\", false, function () {\n  return [useSound];\n});\n_c = Timer;\nexport default Timer;\nvar _c;\n$RefreshReg$(_c, \"Timer\");","map":{"version":3,"names":["useState","useEffect","useRef","TimerText","TimerButton","ModeSelection","MODES","useSound","endSound","jsxDEV","_jsxDEV","Timer","_s","timeLeft","setTimeLeft","localStorage","getItem","timerOn","setTimerOn","minutes","setMinutes","seconds","setSeconds","currMode","setCurrMode","POMODORO","pomodoroCount","setPomodoroCount","playSound","volume","CalculateTime","time","Math","floor","onTimerEnd","setItem","SwitchMode","mode","SHORT_BREAK","nextMode","LONG_BREAK","prev","timer","setInterval","clearInterval","children","fileName","_jsxFileName","lineNumber","columnNumber","text","onClick","id","_c","$RefreshReg$"],"sources":["/home/aria/source/pomodoro/src/components/Timer.js"],"sourcesContent":["import { useState, useEffect, useRef } from \"react\";\nimport TimerText from \"./TimerText\";\nimport TimerButton from \"./TimerButton\";\nimport ModeSelection from \"./ModeSelection\";\nimport \"./../App.css\";\nimport { MODES } from \"./../utils/Constants\";\nimport useSound from \"use-sound\";\nimport endSound from \"../assets/audio/bell.mp3\"\n\n/*\n    Component for the timer\n*/\nfunction Timer() {\n    const [timeLeft, setTimeLeft] = useState(localStorage.getItem(\"timeLeft\"));\n    const [timerOn, setTimerOn] = useState(false);\n    const [minutes, setMinutes] = useState(25);\n    const [seconds, setSeconds] = useState(0);\n    const [currMode, setCurrMode] = useState(MODES.POMODORO);\n    const [pomodoroCount, setPomodoroCount] = useState(0);\n    const [playSound] = useSound(endSound, { volume: 0.1 });\n\n    /*\n        Calculates the minutes and seconds of time left\n    */\n    function CalculateTime(time) {\n        setMinutes(Math.floor(time/60));\n        setSeconds(time % 60);\n\n        // stops timer after complete\n        if(time <= 0) {\n            onTimerEnd();\n        }\n\n        // cache time\n        localStorage.setItem(\"timeLeft\", time);\n    }\n\n    /*\n        Changes the time to the time of a corresponding mode\n    */\n    function SwitchMode(mode) {\n        if(currMode === mode) return; \n\n        setCurrMode(mode);\n\n        // stop timer\n        setTimerOn(false);\n\n        let time = 0;\n\n        // change the time of the timer to the time of the corresponding mode\n        if(mode === MODES.POMODORO) {\n            time = 1500;\n        }\n        else if(mode === MODES.SHORT_BREAK) {\n            time = 300;\n        }\n        else {\n            time = 1800;\n        }\n\n        setTimeLeft(time);\n        CalculateTime(time);\n\n        // cache mode \n        localStorage.setItem(\"mode\", mode);\n    }\n\n    /*\n        Notifies the user that time is up and switches the mode\n    */\n    function onTimerEnd() {\n        // stop timer\n        setTimerOn(false);\n\n        playSound();\n\n        let nextMode = MODES.POMODORO;\n\n        // if pomodoro just finished, increment pomodoroCount\n        if(currMode === MODES.POMODORO) {\n            // if pomodoroCount + 1 is a multiple of 4, then take long break\n            // otherwise, short break\n            if((pomodoroCount + 1) % 4 === 0) {\n                nextMode = MODES.LONG_BREAK;\n            }\n            else {\n                nextMode = MODES.SHORT_BREAK;\n            }\n\n            setPomodoroCount((prev) => prev + 1);\n            \n            // cache pomodoro count\n            localStorage.setItem(\"pomodoroCount\", pomodoroCount);\n        }\n\n        SwitchMode(nextMode);\n    }\n\n    useEffect(() => {\n        let timer = null;\n        CalculateTime(timeLeft);\n\n        // create interval when timer is running\n        if(timerOn) {\n            timer = setInterval(() => {\n                CalculateTime(timeLeft - 1);\n                setTimeLeft((prev) => prev - 1);\n            }, 1000);\n        }\n        else {\n            clearInterval(timer);\n        }\n\n        return () => clearInterval(timer);\n    }, [timeLeft, timerOn, currMode]);\n\n    return (\n        <div>\n            <ModeSelection SwitchMode={SwitchMode}/>\n            <TimerText minutes={minutes} seconds={seconds}/>\n            <TimerButton text={timerOn ? \"Pause\" : \"Start\"} onClick={() => {setTimerOn(!timerOn)}}/>\n            <h3 id=\"pomodoro-count\">#{pomodoroCount + 1}</h3>\n        </div>\n    );\n}\n\nexport default Timer;"],"mappings":";;AAAA,SAASA,QAAQ,EAAEC,SAAS,EAAEC,MAAM,QAAQ,OAAO;AACnD,OAAOC,SAAS,MAAM,aAAa;AACnC,OAAOC,WAAW,MAAM,eAAe;AACvC,OAAOC,aAAa,MAAM,iBAAiB;AAC3C,OAAO,cAAc;AACrB,SAASC,KAAK,QAAQ,sBAAsB;AAC5C,OAAOC,QAAQ,MAAM,WAAW;AAChC,OAAOC,QAAQ,MAAM,0BAA0B;;AAE/C;AACA;AACA;AAFA,SAAAC,MAAA,IAAAC,OAAA;AAGA,SAASC,KAAKA,CAAA,EAAG;EAAAC,EAAA;EACb,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGd,QAAQ,CAACe,YAAY,CAACC,OAAO,CAAC,UAAU,CAAC,CAAC;EAC1E,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGlB,QAAQ,CAAC,KAAK,CAAC;EAC7C,MAAM,CAACmB,OAAO,EAAEC,UAAU,CAAC,GAAGpB,QAAQ,CAAC,EAAE,CAAC;EAC1C,MAAM,CAACqB,OAAO,EAAEC,UAAU,CAAC,GAAGtB,QAAQ,CAAC,CAAC,CAAC;EACzC,MAAM,CAACuB,QAAQ,EAAEC,WAAW,CAAC,GAAGxB,QAAQ,CAACM,KAAK,CAACmB,QAAQ,CAAC;EACxD,MAAM,CAACC,aAAa,EAAEC,gBAAgB,CAAC,GAAG3B,QAAQ,CAAC,CAAC,CAAC;EACrD,MAAM,CAAC4B,SAAS,CAAC,GAAGrB,QAAQ,CAACC,QAAQ,EAAE;IAAEqB,MAAM,EAAE;EAAI,CAAC,CAAC;;EAEvD;AACJ;AACA;EACI,SAASC,aAAaA,CAACC,IAAI,EAAE;IACzBX,UAAU,CAACY,IAAI,CAACC,KAAK,CAACF,IAAI,GAAC,EAAE,CAAC,CAAC;IAC/BT,UAAU,CAACS,IAAI,GAAG,EAAE,CAAC;;IAErB;IACA,IAAGA,IAAI,IAAI,CAAC,EAAE;MACVG,UAAU,CAAC,CAAC;IAChB;;IAEA;IACAnB,YAAY,CAACoB,OAAO,CAAC,UAAU,EAAEJ,IAAI,CAAC;EAC1C;;EAEA;AACJ;AACA;EACI,SAASK,UAAUA,CAACC,IAAI,EAAE;IACtB,IAAGd,QAAQ,KAAKc,IAAI,EAAE;IAEtBb,WAAW,CAACa,IAAI,CAAC;;IAEjB;IACAnB,UAAU,CAAC,KAAK,CAAC;IAEjB,IAAIa,IAAI,GAAG,CAAC;;IAEZ;IACA,IAAGM,IAAI,KAAK/B,KAAK,CAACmB,QAAQ,EAAE;MACxBM,IAAI,GAAG,IAAI;IACf,CAAC,MACI,IAAGM,IAAI,KAAK/B,KAAK,CAACgC,WAAW,EAAE;MAChCP,IAAI,GAAG,GAAG;IACd,CAAC,MACI;MACDA,IAAI,GAAG,IAAI;IACf;IAEAjB,WAAW,CAACiB,IAAI,CAAC;IACjBD,aAAa,CAACC,IAAI,CAAC;;IAEnB;IACAhB,YAAY,CAACoB,OAAO,CAAC,MAAM,EAAEE,IAAI,CAAC;EACtC;;EAEA;AACJ;AACA;EACI,SAASH,UAAUA,CAAA,EAAG;IAClB;IACAhB,UAAU,CAAC,KAAK,CAAC;IAEjBU,SAAS,CAAC,CAAC;IAEX,IAAIW,QAAQ,GAAGjC,KAAK,CAACmB,QAAQ;;IAE7B;IACA,IAAGF,QAAQ,KAAKjB,KAAK,CAACmB,QAAQ,EAAE;MAC5B;MACA;MACA,IAAG,CAACC,aAAa,GAAG,CAAC,IAAI,CAAC,KAAK,CAAC,EAAE;QAC9Ba,QAAQ,GAAGjC,KAAK,CAACkC,UAAU;MAC/B,CAAC,MACI;QACDD,QAAQ,GAAGjC,KAAK,CAACgC,WAAW;MAChC;MAEAX,gBAAgB,CAAEc,IAAI,IAAKA,IAAI,GAAG,CAAC,CAAC;;MAEpC;MACA1B,YAAY,CAACoB,OAAO,CAAC,eAAe,EAAET,aAAa,CAAC;IACxD;IAEAU,UAAU,CAACG,QAAQ,CAAC;EACxB;EAEAtC,SAAS,CAAC,MAAM;IACZ,IAAIyC,KAAK,GAAG,IAAI;IAChBZ,aAAa,CAACjB,QAAQ,CAAC;;IAEvB;IACA,IAAGI,OAAO,EAAE;MACRyB,KAAK,GAAGC,WAAW,CAAC,MAAM;QACtBb,aAAa,CAACjB,QAAQ,GAAG,CAAC,CAAC;QAC3BC,WAAW,CAAE2B,IAAI,IAAKA,IAAI,GAAG,CAAC,CAAC;MACnC,CAAC,EAAE,IAAI,CAAC;IACZ,CAAC,MACI;MACDG,aAAa,CAACF,KAAK,CAAC;IACxB;IAEA,OAAO,MAAME,aAAa,CAACF,KAAK,CAAC;EACrC,CAAC,EAAE,CAAC7B,QAAQ,EAAEI,OAAO,EAAEM,QAAQ,CAAC,CAAC;EAEjC,oBACIb,OAAA;IAAAmC,QAAA,gBACInC,OAAA,CAACL,aAAa;MAAC+B,UAAU,EAAEA;IAAW;MAAAU,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAC,CAAC,eACxCvC,OAAA,CAACP,SAAS;MAACgB,OAAO,EAAEA,OAAQ;MAACE,OAAO,EAAEA;IAAQ;MAAAyB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAC,CAAC,eAChDvC,OAAA,CAACN,WAAW;MAAC8C,IAAI,EAAEjC,OAAO,GAAG,OAAO,GAAG,OAAQ;MAACkC,OAAO,EAAEA,CAAA,KAAM;QAACjC,UAAU,CAAC,CAACD,OAAO,CAAC;MAAA;IAAE;MAAA6B,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAC,CAAC,eACxFvC,OAAA;MAAI0C,EAAE,EAAC,gBAAgB;MAAAP,QAAA,GAAC,GAAC,EAACnB,aAAa,GAAG,CAAC;IAAA;MAAAoB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAChD,CAAC;AAEd;AAACrC,EAAA,CAjHQD,KAAK;EAAA,QAOUJ,QAAQ;AAAA;AAAA8C,EAAA,GAPvB1C,KAAK;AAmHd,eAAeA,KAAK;AAAC,IAAA0C,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
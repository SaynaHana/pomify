{"ast":null,"code":"var _jsxFileName = \"/home/aria/source/pomodoro/src/components/Timer.js\",\n  _s = $RefreshSig$();\nimport { useState, useEffect, useRef } from \"react\";\nimport TimerText from \"./TimerText\";\nimport TimerButton from \"./TimerButton\";\nimport ModeSelection from \"./ModeSelection\";\nimport \"./../App.css\";\nimport { MODES } from \"./../utils/Constants\";\nimport useSound from \"use-sound\";\nimport endSound from \"../assets/audio/bell.mp3\";\n\n/*\n    Component for the timer\n*/\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Timer() {\n  _s();\n  const [timeLeft, setTimeLeft] = useState(1500);\n  const [timerOn, setTimerOn] = useState(false);\n  const [minutes, setMinutes] = useState(25);\n  const [seconds, setSeconds] = useState(0);\n  const [currMode, setCurrMode] = useState(MODES.POMODORO);\n  const [pomodoroCount, setPomodoroCount] = useState(0);\n  const [playSound] = useSound(endSound, {\n    volume: 0.1\n  });\n\n  /*\n      Calculates the minutes and seconds of time left\n  */\n  function calculateTime(time) {\n    setMinutes(Math.floor(time / 60));\n    setSeconds(time % 60);\n\n    // stops timer after complete\n    if (time <= 0) {\n      onTimerEnd();\n    }\n\n    // cache time\n    localStorage.setItem(\"timeLeft\", JSON.stringify(time));\n  }\n\n  /*\n      Changes the time to the time of a corresponding mode\n  */\n  function switchMode(mode) {\n    if (currMode === mode) return;\n    setCurrMode(mode);\n\n    // stop timer\n    setTimerOn(false);\n    let time = 0;\n\n    // change the time of the timer to the time of the corresponding mode\n    if (mode === MODES.POMODORO) {\n      time = 1500;\n    } else if (mode === MODES.SHORT_BREAK) {\n      time = 300;\n    } else {\n      time = 1800;\n    }\n    setTimeLeft(time);\n    calculateTime(time);\n\n    // cache mode \n    localStorage.setItem(\"mode\", JSON.stringify(mode));\n  }\n\n  /*\n      Notifies the user that time is up and switches the mode\n  */\n  function onTimerEnd() {\n    // stop timer\n    setTimerOn(false);\n    playSound();\n    let nextMode = MODES.POMODORO;\n\n    // if pomodoro just finished, increment pomodoroCount\n    if (currMode === MODES.POMODORO) {\n      // if pomodoroCount + 1 is a multiple of 4, then take long break\n      // otherwise, short break\n      if ((pomodoroCount + 1) % 4 === 0) {\n        nextMode = MODES.LONG_BREAK;\n      } else {\n        nextMode = MODES.SHORT_BREAK;\n      }\n      setPomodoroCount(prev => prev + 1);\n\n      // cache pomodoro count\n      localStorage.setItem(\"pomodoroCount\", JSON.stringify(pomodoroCount + 1));\n    }\n    switchMode(nextMode);\n  }\n  function onStartup() {\n    const _timeLeft = JSON.parse(localStorage.getItem(\"timeLeft\"));\n    const _mode = JSON.parse(localStorage.getItem(\"mode\"));\n    const _pomodoroCount = JSON.parse(localStorage.getItem(\"pomodoroCount\"));\n    console.log(\"Time Left: \" + _timeLeft);\n    console.log(\"Mode: \" + _mode);\n    console.log(\"Pomodoro Count: \" + _pomodoroCount);\n    if (_timeLeft != null) {\n      setTimeLeft(_timeLeft);\n    }\n    if (_mode != null) {\n      switchMode(_mode);\n    }\n    if (_pomodoroCount != null) {\n      setPomodoroCount(pomodoroCount);\n    }\n    calculateTime(_timeLeft);\n  }\n\n  // initialize data from local storage\n  useEffect(() => {\n    onStartup();\n  }, []);\n  useEffect(() => {\n    let timer = null;\n\n    // create interval when timer is running\n    if (timerOn) {\n      timer = setInterval(() => {\n        calculateTime(timeLeft - 1);\n        setTimeLeft(prev => prev - 1);\n\n        // change name of document\n        let modeName = \"Long Break\";\n        if (currMode === MODES.POMODORO) {\n          modeName = \"Pomodoro\";\n        } else if (currMode === MODES.SHORT_BREAK) {\n          modeName = \"Short Break\";\n        }\n        document.title = modeName + \": \" + minutes + \":\" + String(seconds).padStart(2, \"0\");\n      }, 1000);\n    } else {\n      clearInterval(timer);\n    }\n    return () => clearInterval(timer);\n  }, [timeLeft, timerOn, currMode]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"timer-background\",\n      children: [/*#__PURE__*/_jsxDEV(ModeSelection, {\n        SwitchMode: switchMode\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(TimerText, {\n        minutes: minutes,\n        seconds: seconds\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(TimerButton, {\n        text: timerOn ? \"Pause\" : \"Start\",\n        onClick: () => {\n          setTimerOn(!timerOn);\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 164,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        id: \"pomodoro-count\",\n        children: [\"#\", pomodoroCount + 1]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 165,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 161,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 160,\n    columnNumber: 9\n  }, this);\n}\n_s(Timer, \"L30C0571gn+wV2HGtX1epJYdcCs=\", false, function () {\n  return [useSound];\n});\n_c = Timer;\nexport default Timer;\nvar _c;\n$RefreshReg$(_c, \"Timer\");","map":{"version":3,"names":["useState","useEffect","useRef","TimerText","TimerButton","ModeSelection","MODES","useSound","endSound","jsxDEV","_jsxDEV","Timer","_s","timeLeft","setTimeLeft","timerOn","setTimerOn","minutes","setMinutes","seconds","setSeconds","currMode","setCurrMode","POMODORO","pomodoroCount","setPomodoroCount","playSound","volume","calculateTime","time","Math","floor","onTimerEnd","localStorage","setItem","JSON","stringify","switchMode","mode","SHORT_BREAK","nextMode","LONG_BREAK","prev","onStartup","_timeLeft","parse","getItem","_mode","_pomodoroCount","console","log","timer","setInterval","modeName","document","title","String","padStart","clearInterval","children","className","SwitchMode","fileName","_jsxFileName","lineNumber","columnNumber","text","onClick","id","_c","$RefreshReg$"],"sources":["/home/aria/source/pomodoro/src/components/Timer.js"],"sourcesContent":["import { useState, useEffect, useRef } from \"react\";\nimport TimerText from \"./TimerText\";\nimport TimerButton from \"./TimerButton\";\nimport ModeSelection from \"./ModeSelection\";\nimport \"./../App.css\";\nimport { MODES } from \"./../utils/Constants\";\nimport useSound from \"use-sound\";\nimport endSound from \"../assets/audio/bell.mp3\"\n\n/*\n    Component for the timer\n*/\nfunction Timer() {\n    const [timeLeft, setTimeLeft] = useState(1500);\n    const [timerOn, setTimerOn] = useState(false);\n    const [minutes, setMinutes] = useState(25);\n    const [seconds, setSeconds] = useState(0);\n    const [currMode, setCurrMode] = useState(MODES.POMODORO);\n    const [pomodoroCount, setPomodoroCount] = useState(0);\n    const [playSound] = useSound(endSound, { volume: 0.1 });\n\n    /*\n        Calculates the minutes and seconds of time left\n    */\n    function calculateTime(time) {\n        setMinutes(Math.floor(time/60));\n        setSeconds(time % 60);\n\n        // stops timer after complete\n        if(time <= 0) {\n            onTimerEnd();\n        }\n\n        // cache time\n        localStorage.setItem(\"timeLeft\", JSON.stringify(time));\n    }\n\n    /*\n        Changes the time to the time of a corresponding mode\n    */\n    function switchMode(mode) {\n        if(currMode === mode) return; \n\n        setCurrMode(mode);\n\n        // stop timer\n        setTimerOn(false);\n\n        let time = 0;\n\n        // change the time of the timer to the time of the corresponding mode\n        if(mode === MODES.POMODORO) {\n            time = 1500;\n        }\n        else if(mode === MODES.SHORT_BREAK) {\n            time = 300;\n        }\n        else {\n            time = 1800;\n        }\n\n        setTimeLeft(time);\n        calculateTime(time);\n\n        // cache mode \n        localStorage.setItem(\"mode\", JSON.stringify(mode));\n    }\n\n    /*\n        Notifies the user that time is up and switches the mode\n    */\n    function onTimerEnd() {\n        // stop timer\n        setTimerOn(false);\n\n        playSound();\n\n        let nextMode = MODES.POMODORO;\n\n        // if pomodoro just finished, increment pomodoroCount\n        if(currMode === MODES.POMODORO) {\n            // if pomodoroCount + 1 is a multiple of 4, then take long break\n            // otherwise, short break\n            if((pomodoroCount + 1) % 4 === 0) {\n                nextMode = MODES.LONG_BREAK;\n            }\n            else {\n                nextMode = MODES.SHORT_BREAK;\n            }\n\n            setPomodoroCount((prev) => prev + 1);\n            \n            // cache pomodoro count\n            localStorage.setItem(\"pomodoroCount\", JSON.stringify(pomodoroCount + 1));\n        }\n\n        switchMode(nextMode);\n    }\n\n    function onStartup() {\n        const _timeLeft = JSON.parse(localStorage.getItem(\"timeLeft\"));\n        const _mode = JSON.parse(localStorage.getItem(\"mode\"));\n        const _pomodoroCount = JSON.parse(localStorage.getItem(\"pomodoroCount\"));\n\n        console.log(\"Time Left: \" + _timeLeft);\n        console.log(\"Mode: \" + _mode);\n        console.log(\"Pomodoro Count: \" + _pomodoroCount);\n\n        if(_timeLeft != null) {\n            setTimeLeft(_timeLeft);\n        }\n        \n        if(_mode != null) {\n            switchMode(_mode);\n        }\n\n        if(_pomodoroCount != null) {\n            setPomodoroCount(pomodoroCount);\n        }\n\n        calculateTime(_timeLeft);\n    }\n\n    // initialize data from local storage\n    useEffect(() => {\n       onStartup();\n    }, []);\n\n    useEffect(() => {\n        let timer = null;\n\n        // create interval when timer is running\n        if(timerOn) {\n            timer = setInterval(() => {\n                calculateTime(timeLeft - 1);\n                setTimeLeft((prev) => prev - 1);\n\n                // change name of document\n                let modeName = \"Long Break\";\n\n                if(currMode === MODES.POMODORO) {\n                    modeName = \"Pomodoro\"; \n                }\n                else if(currMode === MODES.SHORT_BREAK) {\n                    modeName = \"Short Break\";\n                }\n\n                document.title = modeName + \": \" + minutes + \":\" + String(seconds).padStart(2, \"0\");\n\n            }, 1000);\n        }\n        else {\n            clearInterval(timer);\n        }\n\n        return () => clearInterval(timer);\n    }, [timeLeft, timerOn, currMode]);\n\n    return (\n        <div>\n            <div className=\"timer-background\">\n            <ModeSelection SwitchMode={switchMode}/>\n            <TimerText minutes={minutes} seconds={seconds}/>\n            <TimerButton text={timerOn ? \"Pause\" : \"Start\"} onClick={() => {setTimerOn(!timerOn)}}/>\n            <h3 id=\"pomodoro-count\">#{pomodoroCount + 1}</h3>\n            </div>\n        </div>\n    );\n}\n\nexport default Timer;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}